#!/bin/bash

# Function to get the root directory of the project by looking for settings.yaml
get_root_dir() {
    DIR="$(pwd)"
    while [[ ! -f "$DIR/settings.yaml" && "$DIR" != "/" ]]; do
        DIR=$(dirname "$DIR")
    done

    if [[ -f "$DIR/settings.yaml" ]]; then
        echo "$DIR"
    else
        echo "$(pwd)"
        exit 1
    fi
}

get_script_dir() {
    # Resolve the source path of the script
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # Follow symbolic links
        DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
        SOURCE="$(readlink "$SOURCE")"
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # If the link is relative, resolve it
    done
    DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
    echo "$DIR"
}


get_next_test_id() {
    local TESTS_DIR="$1"
    local LAST_TEST_ID=$(find "$TESTS_DIR" -name "metadata.yaml" -exec yq eval '.test_id' {} \; | grep -E '^[0-9]+$' | sort -n | tail -1)
    if [[ -z "$LAST_TEST_ID" ]]; then
        echo "1"
    else
        echo "$((LAST_TEST_ID + 1))"
    fi
}

# Function to list tests with their IDs and names
list_tests() {
    local TESTS_DIR="$1"
    echo "Available Tests:"
    echo "----------------"
    find "$TESTS_DIR" -name "metadata.yaml" | while read -r METADATA_FILE; do
        TEST_ID=$(yq eval '.test_id' "$METADATA_FILE")
        TEST_NAME=$(yq eval '.test_name' "$METADATA_FILE")
        echo "$TEST_ID: $TEST_NAME"
    done
}







# Get the root directory
ROOT_DIR=$(get_root_dir)

# Retrieve settings from settings.yaml
SETTINGS_FILE="$ROOT_DIR/settings.yaml"
TESTS_DIR="$ROOT_DIR/$(yq eval '.project.tests_dir' "$SETTINGS_FILE")"
BINARIES_DIR="$ROOT_DIR/$(yq eval '.project.binaries_dir' "$SETTINGS_FILE")"
CROCO_DIR=$(yq eval '.project.croco_dir' "$SETTINGS_FILE")

echo ""
echo "ROOT_DIR=$ROOT_DIR"
echo "TESTS_DIR=$TESTS_DIR"
echo "BINARIES_DIR=$BINARIES_DIR"
echo "CROCO_DIR=$CROCO_DIR"
echo ""



# Get the next test ID
NEXT_TEST_ID=$(get_next_test_id "$TESTS_DIR")

echo "NEXT_TEST_ID=$NEXT_TEST_ID"
echo ""

# Prompt for a descriptive suffix
read -p "
Enter a short description of the test (e.g., HighDiffusivity_Bio): " DESCRIPTION
if [[ -z "$DESCRIPTION" ]]; then
    echo "Error: Description cannot be empty."
    exit 1
fi

# Prompt for the reason for creating the test
read -p "
Enter the reason for creating this test: " REASON
if [[ -z "$REASON" ]]; then
    echo "Error: Reason cannot be empty."
    exit 1
fi


PARENT_TEST_ID="null"
PARENT_TEST_NAME="null"


# Generate the test name
TEST_NAME="Test${NEXT_TEST_ID}_${DESCRIPTION}"

# Check if the test already exists
if [[ -d "$ROOT_DIR/$TESTS_DIR/$TEST_NAME" ]]; then
    echo "Error: Test '$TEST_NAME' already exists. Please choose a different description."
    exit 1
fi

# Confirm the test creation
echo ""
echo "Creating a new test with the following details:"
echo "Test ID: $NEXT_TEST_ID"
echo "Test Name: $TEST_NAME"
echo "Description: $DESCRIPTION"
echo "Reason: $REASON"
echo "Parent Test: None (independent test)"

read -p "
Do you want to proceed with the creation of the test? (y/n): " CONFIRM
if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
    echo "Test creation aborted."
    exit 0
fi

# Create the test directory
TEST_PATH="$TESTS_DIR/$TEST_NAME"
echo "Creating test directory: $TEST_PATH"
mkdir -p "$TEST_PATH"

# Add a folder in the test directory for subtests called "subtests"
mkdir -p "$TEST_PATH/subtests"

# Create the outputs folder
mkdir -p "$TEST_PATH/outputs"

#create the inputs folder
mkdir -p "$TEST_PATH/inputs"

cd "$TEST_PATH"

# Update paths in the infile.in file
INFILE="$TEST_PATH/inputs/infile.in"
if [[ -f "$INFILE" ]]; then

    # Update the test title in the infile.in file
    echo "Updating test title in $INFILE..."

    # Replace the placeholder with the actual test name and ID
    sed -i "s|(To Be Modified by script, should be the same as test title and test number)|$TEST_NAME (ID: $NEXT_TEST_ID)|g" "$INFILE"

    echo "Test title in $INFILE updated successfully."
else
    echo "Warning: infile.in not found in $TEST_PATH/inputs. Skipping updates."
fi



# Create metadata
METADATA_FILE="metadata.yaml"
cat >"$METADATA_FILE" <<EOF
test_id: $NEXT_TEST_ID
test_name: $TEST_NAME
description: $DESCRIPTION
reason: $REASON
parent_test_id: $PARENT_TEST_ID
date: $(date +'%Y-%m-%d %H:%M:%S')
EOF


echo "Test '$TEST_NAME' created successfully."
