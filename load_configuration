#!/bin/bash

# --- Defaults ---
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
CONFIG_DIR="$SCRIPT_DIR/Configs"
CONFIG_FILE="$SCRIPT_DIR/Configs/config_map.yaml"
FORCE=false      # Default: don't overwrite

# Check if metadata.yaml exists and extract test_id
if [[ -f metadata.yaml ]]; then
  TEST_ID=$(yq e ".test_id" metadata.yaml)
  TEST_NAME=$(yq e ".test_name" metadata.yaml)
  TEST_DIR=$(pwd)
else
  echo "Error: metadata.yaml not found. Please run this script from within a test directory."
  exit 1
fi

# Function to prompt user for configuration options
prompt_config() {
  # Load configuration options from config_map.yaml
  local resolutions=($(yq e ".Resolutions | keys | .[]" "$CONFIG_FILE"))
  local initial_conditions=($(yq e ".InitialConditions | keys | .[]" "$CONFIG_FILE"))
  local diffusion_settings=($(yq e ".Diffusion | keys | .[]" "$CONFIG_FILE"))

  # Prompt for resolution
  select resolution in "${resolutions[@]}"; do
    if [[ -n "$resolution" ]]; then
      break
    else
      echo "Invalid selection. Please choose a resolution from the list."
    fi
  done

  # Prompt for biology or physics
  select bio_physics in "Biology" "Physics"; do
    if [[ -n "$bio_physics" ]]; then
      break
    else
      echo "Invalid selection. Please choose Biology or Physics."
    fi
  done

  # Prompt for initial condition configuration
  select initial_condition in "${initial_conditions[@]}"; do
    if [[ -n "$initial_condition" ]]; then
      break
    else
      echo "Invalid selection. Please choose an initial condition from the list."
    fi
  done

  # Prompt for diffusion settings
  select diffusion in "${diffusion_settings[@]}"; do
    if [[ -n "$diffusion" ]]; then
      break
    else
      echo "Invalid selection. Please choose a diffusion setting from the list."
    fi
  done

  # Store the selected options (you can modify this to return the values)
  SELECTED_RESOLUTION="$resolution"
  SELECTED_BIO_PHYSICS="$bio_physics"
  SELECTED_INITIAL_CONDITION="$initial_condition"
  SELECTED_DIFFUSION="$diffusion"

  # Confirm configuration with user
  while true; do
    read -r -p "Confirm configuration? (y/n): " confirm
    case "$confirm" in
      [yY][eE][sS]|[yY])
        break
        ;;
      [nN][oO]|[nN])
        echo "Please run the script again to select a different configuration."
        exit 1
        ;;
      *)
        echo "Invalid input. Please answer 'y' or 'n'."
        ;;
    esac
  done
}

# Function to determine file paths based on selected configuration
get_file_paths() {
  local resolution="$1"
  local bio_physics="$2"
  local initial_condition="$3"
  local diffusion="$4"

  # Load file destinations from config_map.yaml into an associative array
  declare -A file_dests
  while IFS=':' read -r key value; do
    file_dests["${key}"]="${value}"
  done < <(yq e ".FileDestinations | to_entries | .[] | .key + \":\" + .value" "$CONFIG_FILE")

  # Determine source paths based on configuration
  local grid_src=$(yq e ".Resolutions.\"$resolution\".input_grd" "$CONFIG_FILE" 2>/dev/null)
  local forcing_src=$(yq e ".Resolutions.\"$resolution\".input_frc" "$CONFIG_FILE" 2>/dev/null)
  local param_src=$(yq e ".Resolutions.\"$resolution\".param" "$CONFIG_FILE" 2>/dev/null)
  local cppdefs_src=$(yq e ".BiologyPhysics.\"$bio_physics\".cppdefs" "$CONFIG_FILE" 2>/dev/null)
  local restart_src=$(yq e ".InitialConditions.\"$initial_condition\".input_rst_$resolution" "$CONFIG_FILE" 2>/dev/null) #Resolution specific restart
  local description_src=$(yq e ".InitialConditions.\"$initial_condition\".Description" "$CONFIG_FILE" 2>/dev/null)
  local diffusion_src=$(yq e ".Diffusion.\"$diffusion\".t3dmix_S" "$CONFIG_FILE" 2>/dev/null)
  local infile_src=$(yq e ".BaseFiles.infile" "$CONFIG_FILE" 2>/dev/null)
  local jobcomp_src=$(yq e ".BaseFiles.jobcomp" "$CONFIG_FILE" 2>/dev/null)
}

# Function to copy files based on the manifest file
copy_files() {
  local resolution="$1"
  local bio_physics="$2"
  local initial_condition="$3"
  local diffusion="$4"

  # Load file destinations from config_map.yaml into an associative array
  declare -A file_dests
  while IFS=':' read -r key value; do
    file_dests["${key}"]="${value}"
  done < <(yq e ".FileDestinations | to_entries | .[] | .key + \":\" + .value" "$CONFIG_FILE")

  # Determine source paths based on configuration
  local grid_src=$(yq e ".Resolutions.\"$resolution\".input_grd" "$CONFIG_FILE" 2>/dev/null)
  local forcing_src=$(yq e ".Resolutions.\"$resolution\".input_frc" "$CONFIG_FILE" 2>/dev/null)
  local param_src=$(yq e ".Resolutions.\"$resolution\".param" "$CONFIG_FILE" 2>/dev/null)
  local cppdefs_src=$(yq e ".BiologyPhysics.\"$bio_physics\".cppdefs" "$CONFIG_FILE" 2>/dev/null)
  local restart_src=$(yq e ".InitialConditions.\"$initial_condition\".input_rst_$resolution" "$CONFIG_FILE" 2>/dev/null) #Resolution specific restart
  local description_src=$(yq e ".InitialConditions.\"$initial_condition\".Description" "$CONFIG_FILE" 2>/dev/null)
  local diffusion_src=$(yq e ".Diffusion.\"$diffusion\".t3dmix_S" "$CONFIG_FILE" 2>/dev/null)
  local infile_src=$(yq e ".BaseFiles.infile" "$CONFIG_FILE" 2>/dev/null)
  local jobcomp_src=$(yq e ".BaseFiles.jobcomp" "$CONFIG_FILE" 2>/dev/null)

  # Load file destinations from config_map.yaml into an associative array
  declare -A file_dests
  while IFS=':' read -r key value; do
    file_dests["${key}"]="${value}"
  done < <(yq e ".FileDestinations | to_entries | .[] | .key + \":\" + .value" "$CONFIG_FILE")

  # Copy files from manifest.yaml
  while IFS= read -r line; do
    if [[ "$line" == files:* ]]; then
      continue  # Skip the 'files:' line
    fi

    # Extract src and dest using yq
    local src=$(yq e ".src" <<< "$line")
    local dest=$(yq e ".dest" <<< "$line")

    if [[ -n "$src" && -n "$dest" ]]; then
      # Determine the full source and destination paths
      local full_src="$SCRIPT_DIR/base_files/$src"
      local full_dest="$TEST_DIR/$dest"

      # Check if the destination is a directory and create it if it doesn't exist
      if [[ ! -d "$full_dest" ]]; then
        mkdir -p "$full_dest"
      fi

      # Copy the file to the destination
      cp "$full_src" "$full_dest"
    fi
  done < <(yq e ".files | to_yaml" base_files/manifest.yaml)

  # Copy the selected files
  if [[ -n "$grid_src" ]]; then
    cp "$CONFIG_DIR/$grid_src" "$TEST_DIR/${file_dests["Grid"]}"
  fi
  if [[ -n "$forcing_src" ]]; then
    cp "$CONFIG_DIR/$forcing_src" "$TEST_DIR/${file_dests["Forcing"]}"
  fi
  if [[ -n "$restart_src" ]]; then
    cp "$CONFIG_DIR/$restart_src" "$TEST_DIR/${file_dests["Restart"]}"
  fi
  if [[ -n "$param_src" ]]; then
    cp "$CONFIG_DIR/$param_src" "$TEST_DIR/${file_dests["Param"]}"
  fi
  if [[ -n "$cppdefs_src" ]]; then
    cp "$CONFIG_DIR/$cppdefs_src" "$TEST_DIR/${file_dests["Cppdefs"]}"
  fi
  if [[ -n "$description_src" ]]; then
    cp "$CONFIG_DIR/$description_src" "$TEST_DIR/${file_dests["ConfigDescription"]}"
  fi
  if [[ -n "$diffusion_src" ]]; then
    cp "$CONFIG_DIR/$diffusion_src" "$TEST_DIR/${file_dests["Diffusion"]}"
  fi
  if [[ -n "$infile_src" ]]; then
    cp "$CONFIG_DIR/$infile_src" "$TEST_DIR/${file_dests["Infile"]}"
  fi
  if [[ -n "$jobcomp_src" ]]; then
    cp "$CONFIG_DIR/$jobcomp_src" "$TEST_DIR/${file_dests["CompilationScript"]}"
  fi
}

prompt_config

# After the configuration is confirmed, determine and print the file paths
get_file_paths "$SELECTED_RESOLUTION" "$SELECTED_BIO_PHYSICS" "$SELECTED_INITIAL_CONDITION" "$SELECTED_DIFFUSION"
copy_files "$SELECTED_RESOLUTION" "$SELECTED_BIO_PHYSICS" "$SELECTED_INITIAL_CONDITION" "$SELECTED_DIFFUSION"
