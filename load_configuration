#!/bin/bash

# --- Defaults ---
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
CONFIG_DIR="$SCRIPT_DIR/Configs"
BASE_FILES_DIR="$SCRIPT_DIR/base_files"
CONFIG_FILE="$CONFIG_DIR/config_map.yaml"

# Function to check if metadata.yaml exists and extract test details
check_metadata() {
  if [[ -f metadata.yaml ]]; then
    TEST_ID=$(yq e ".test_id" metadata.yaml)
    TEST_NAME=$(yq e ".test_name" metadata.yaml)
    TEST_DIR=$(pwd)
  else
    echo -e "\n\033[1;31mError:\033[0m metadata.yaml not found."
    echo "Please run this script from within a test directory."
    exit 1
  fi
}

# Function to prompt user for configuration options
prompt_config() {
  echo -e "\n\033[1;34m--- Configuration Setup ---\033[0m"

  # Load configuration options
  local resolutions=($(yq e ".Resolutions | keys | .[]" "$CONFIG_FILE"))
  local initial_conditions=($(yq e ".InitialConditions | keys | .[]" "$CONFIG_FILE"))
  local diffusion_settings=($(yq e ".Diffusion | keys | .[]" "$CONFIG_FILE"))

  echo -e "\n\033[1;33mSelect Resolution:\033[0m"
  select resolution in "${resolutions[@]}"; do
    [[ -n "$resolution" ]] && break
    echo "Invalid selection. Please choose a valid option."
  done

  echo -e "\n\033[1;33mSelect Model Type:\033[0m"
  select bio_physics in "biology" "physics"; do
    [[ -n "$bio_physics" ]] && break
    echo "Invalid selection. Please choose a valid option."
  done

  echo -e "\n\033[1;33mSelect Initial Condition:\033[0m"
  select initial_condition in "${initial_conditions[@]}"; do
    [[ -n "$initial_condition" ]] && break
    echo "Invalid selection. Please choose a valid option."
  done

  # Store selected options
  SELECTED_RESOLUTION="$resolution"
  SELECTED_BIO_PHYSICS="$bio_physics"
  SELECTED_INITIAL_CONDITION="$initial_condition"

  # Confirm selection
  echo -e "\n\033[1;34m--- Selected Configuration ---\033[0m"
  echo -e "  Resolution: \033[1;32m$SELECTED_RESOLUTION\033[0m"
  echo -e "  Model Type: \033[1;32m$SELECTED_BIO_PHYSICS\033[0m"
  echo -e "  Initial Condition: \033[1;32m$SELECTED_INITIAL_CONDITION\033[0m"
  
  while true; do
    read -r -p "Confirm configuration? (y/n): " confirm
    case "$confirm" in
      [yY][eE][sS]|[yY]) break ;;
      [nN][oO]|[nN])
        echo -e "\033[1;31mAborted.\033[0m Please rerun the script to select a different configuration."
        exit 1
        ;;
      *) echo "Invalid input. Please answer 'y' or 'n'." ;;
    esac
  done
}

# Function to copy files based on selected configuration
copy_files() {
  local resolution="$1"
  local bio_physics="$2"
  local initial_condition="$3"

  echo -e "\n\033[1;34m--- Copying Configuration Files ---\033[0m"

  declare -A file_dests
  while IFS=':' read -r key value; do
    file_dests["${key}"]="${value}"
  done < <(yq e ".FileDestinations | to_entries | .[] | .key + \":\" + .value" "$CONFIG_FILE")

  local grid_src=$(yq e ".Resolutions.\"$resolution\".input_grd" "$CONFIG_FILE" 2>/dev/null)
  local forcing_src=$(yq e ".Resolutions.\"$resolution\".input_frc" "$CONFIG_FILE" 2>/dev/null)
  local infile_src=$(yq e ".Resolutions.\"$resolution\".infile" "$CONFIG_FILE" 2>/dev/null)
  local cppdefs_src=$(yq e ".Resolutions.\"$resolution\".cppdefs_$bio_physics" "$CONFIG_FILE" 2>/dev/null)
  local param_src=$(yq e ".Resolutions.\"$resolution\".param" "$CONFIG_FILE" 2>/dev/null)
  
  local restart_src=$(yq e ".InitialConditions.\"$initial_condition\".input_rst_$resolution" "$CONFIG_FILE" 2>/dev/null)
  local description_src=$(yq e ".InitialConditions.\"$initial_condition\".Description" "$CONFIG_FILE" 2>/dev/null)

  # Create symbolic links or copy files
  [[ -n "$grid_src" ]] && ln -sf "$CONFIG_DIR/$grid_src" "$TEST_DIR/${file_dests["Grid"]}"
  [[ -n "$forcing_src" ]] && ln -sf "$CONFIG_DIR/$forcing_src" "$TEST_DIR/${file_dests["Forcing"]}"
  [[ -n "$restart_src" ]] && ln -sf "$CONFIG_DIR/$restart_src" "$TEST_DIR/${file_dests["Restart"]}"
  [[ -n "$cppdefs_src" ]] && cp "$CONFIG_DIR/$cppdefs_src" "$TEST_DIR/${file_dests["Cppdefs"]}"
  [[ -n "$param_src" ]] && cp "$CONFIG_DIR/$param_src" "$TEST_DIR/${file_dests["Param"]}"

  [[ -n "$description_src" ]] && cp "$CONFIG_DIR/$description_src" "$TEST_DIR/${file_dests["ConfigDescription"]}"
  [[ -n "$infile_src" ]] && cp "$CONFIG_DIR/$infile_src" "$TEST_DIR/${file_dests["Infile"]}"



  echo -e "\033[1;32mConfiguration files successfully copied!\033[0m"
}

copy_diffusion_files() {
  local diffusion="$1"
  local test_dir_local="$2"

  declare -A file_dests
  while IFS=':' read -r key value; do
    file_dests["${key}"]="${value}"
  done < <(yq e ".FileDestinations | to_entries | .[] | .key + \":\" + .value" "$CONFIG_FILE")

  local diffusion_src=$(yq e ".Diffusion.\"$diffusion\".t3dmix_S" "$CONFIG_FILE" 2>/dev/null)

  [[ -n "$diffusion_src" ]] && cp "$CONFIG_DIR/$diffusion_src" "$test_dir_local/${file_dests["Diffusion"]}"

}

update_diffusion_metadata() {
  local diffusion="$1"
  local metadata_file="$2"

  yq e ".Config.DiffusionSetting = \"$diffusion\"" -i "$metadata_file"
}

# Function to edit metadata.yaml to include the configuration details
update_metadata() {
  local metadata_file="metadata.yaml"

  yq e ".Config.Resolution = \"$SELECTED_RESOLUTION\"" -i "$metadata_file"
  yq e ".Config.ModelType = \"$SELECTED_BIO_PHYSICS\"" -i "$metadata_file"
  yq e ".Config.InitialCondition = \"$SELECTED_INITIAL_CONDITION\"" -i "$metadata_file"

  echo -e "\n\033[1;32mMetadata updated with configuration details.\033[0m"

}


# Main function to orchestrate the process
setup_configuration() {
  check_metadata
  prompt_config
  copy_files "$SELECTED_RESOLUTION" "$SELECTED_BIO_PHYSICS" "$SELECTED_INITIAL_CONDITION"
  update_metadata
}

# Run the setup if the script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  setup_configuration
fi
