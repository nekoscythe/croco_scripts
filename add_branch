#!/bin/bash

QUIET=false

# Function to parse arguments
parse_arguments() {
    while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
        case $1 in
            -q | --quiet)
                QUIET=true
                ;;
        esac
        shift
    done

    if [[ -z "$1" ]]; then
        error "Missing branch test name."
    fi

    echo "$1"
}

# Function to print error messages
error() {
    [[ "$QUIET" == false ]] && echo "Error: $1"
    exit 1
}

# Function to get the root directory
get_root_dir() {
    local dir="$(pwd)"
    while [[ ! -f "$dir/settings.yaml" && "$dir" != "/" ]]; do
        dir=$(dirname "$dir")
    done

    [[ -f "$dir/settings.yaml" ]] || error "Root directory not found."
    echo "$dir"
}

# Function to validate branch name
validate_branch_name() {
    [[ "$1" =~ ^[a-zA-Z0-9_-]+$ ]] || error "Invalid branch test name."
}

# Function to check metadata.yaml
validate_metadata() {
    [[ -f "metadata.yaml" ]] || error "No metadata.yaml file found."
    
    local test_name test_id
    test_name=$(yq eval '.test_name' metadata.yaml)
    test_id=$(yq eval '.test_id' metadata.yaml)
    [[ -n "$test_name" && -n "$test_id" ]] || error "Could not find valid test_name or test_id."
    
    echo "$test_name" "$test_id"
}

# Function to create a new branch test
test_exists() {
    [[ -d "$1" ]] && error "Branch test already exists."
}

# Function to update infile.in with test details
update_infile() {
    local infile="$1"
    local test_id="$2"
    local branch_name="$3"

    if [[ -f "$infile" ]]; then
        echo "Updating test title in $infile..."
        #in line 2, replace the ID with the new ID
        sed -i "2s/ID: [a-zA-Z0-9_-]*/ID: $test_id/" "$infile"
        #in line 2, append the branch_name, preceded by " | " to separate from the parent description
        sed -i "2s/$/ | $branch_name/" "$infile"
        echo "Test title updated in $infile."
    else
        echo "Warning: infile.in not found in inputs. Skipping updates."
    fi
}

create_branch() {
    local branch_name="$1"
    local parent_name="$2"
    local parent_id="$3"
    local subtests_dir="subtests"
    local branch_path="$subtests_dir/$branch_name"
    local existing_count=$(ls -1 "$subtests_dir" 2>/dev/null | wc -l)
    local suffix=$(printf "\\$(printf '%03o' $((97 + existing_count)))")
    local branch_id="${parent_id}${suffix}"
    local outputs_dir="outputs/$branch_name"

    test_exists "$branch_path"

    if [[ "$QUIET" == false ]]; then
        echo "Creating branch test '$branch_name' inside '$parent_name'."
        echo "Full path: $(pwd)/$branch_path"
        read -p "Proceed? (y/n): " confirm
        [[ ! "$confirm" =~ ^[Yy]$ ]] && exit 0
    fi

    mkdir -p "$branch_path" "$branch_path/$subtests_dir" "$outputs_dir"
    rsync -a --exclude="$subtests_dir" --exclude="outputs" . "$branch_path/"
    update_infile "$branch_path/inputs/infile.in" "$branch_id" "$branch_name" 
    ln -s "$(pwd)/$outputs_dir" "$branch_path/outputs"

    local metadata_file="$branch_path/metadata.yaml"
    [[ -f "$metadata_file" ]] || error "Failed to update metadata.yaml."

    yq eval ".test_name = \"$branch_name\"" -i "$metadata_file"
    yq eval ".parent_test = \"$parent_name\"" -i "$metadata_file"
    yq eval ".test_id = \"$branch_id\"" -i "$metadata_file"
    yq eval ".parent_test_id = \"$parent_id\"" -i "$metadata_file"

    if [[ "$QUIET" == false ]]; then
        echo "Branch test '$branch_name' created."
        echo "Outputs stored in: $outputs_dir"
        echo "Branch test ID: $branch_id"
    fi
}

# Main script execution
BRANCH_TEST_NAME=$(parse_arguments "$@")
ROOT_DIR=$(get_root_dir)
validate_branch_name "$BRANCH_TEST_NAME"
read PARENT_TEST_NAME PARENT_TEST_ID < <(validate_metadata)
create_branch "$BRANCH_TEST_NAME" "$PARENT_TEST_NAME" "$PARENT_TEST_ID"

