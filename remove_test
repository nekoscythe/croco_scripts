    #!/bin/bash

    # Function to get the root directory of the project by looking for settings.yaml
    get_root_dir() {
        DIR="$(pwd)"
        while [[ ! -f "$DIR/settings.yaml" && "$DIR" != "/" ]]; do
            DIR=$(dirname "$DIR")
        done

        if [[ -f "$DIR/settings.yaml" ]]; then
            echo "$DIR"
        else
            echo "Error: Root directory not found. Ensure settings.yaml exists in the project root."
            exit 1
        fi
    }

    # Function to check if a binary is used by any other test
    is_binary_used_by_other_tests() {
        ROOT_DIR="$1"
        BINARIES_DIR="$2"
        BINARY_NAME="$3"

        # Scan through all tests to check if the binary is referenced in metadata
        for TEST_DIR in "$ROOT_DIR/Tests"/*; do
            if [[ -d "$TEST_DIR" ]]; then
                METADATA_FILE="$TEST_DIR/metadata.yaml"
                if [[ -f "$METADATA_FILE" ]]; then
                    # Check if the binary is mentioned in the test's metadata
                    if grep -q "$BINARY_NAME" "$METADATA_FILE"; then
                        # The binary is referenced in this test, so it's still in use
                        return 0
                    fi
                fi
            fi
        done

        # Binary is not referenced by any other test
        return 1
    }

    # Function to find and list all subtests recursively and count them
    find_subtests() {
        local PARENT_TEST_PATH=$1
        local SUBTESTS_DIR="$PARENT_TEST_PATH/subtests"
        local SUBTEST_COUNT=0  # Initialize subtest count

        # Check if the subtests directory exists
        if [[ -d "$SUBTESTS_DIR" ]]; then
            for SUBTEST_PATH in "$SUBTESTS_DIR"/*; do
                # Check if the current path is a directory
                if [[ -d "$SUBTEST_PATH" ]]; then
                    # Check for metadata.yaml in the subtest directory
                    local METADATA_FILE="$SUBTEST_PATH/metadata.yaml"
                    if [[ -f "$METADATA_FILE" ]]; then
                        # Extract the test_name from metadata.yaml
                        local TEST_NAME
                        TEST_NAME=$(yq eval '.test_name' "$METADATA_FILE")

                        # Increment the subtest count
                        ((SUBTEST_COUNT++))

                        # Print the subtest details
                        echo "Subtest #$SUBTEST_COUNT"
                        echo "  Name: $TEST_NAME"
                        echo "  Directory: $SUBTEST_PATH"
                        echo

                        # Recursively find subtests of this subtest
                        find_subtests "$SUBTEST_PATH"
                    fi
                fi
            done
        fi
        return $SUBTEST_COUNT
    }

    # Function to find the test path by searching recursively for the test ID in metadata
    find_test_by_id_recursive() {
    local SEARCH_DIR="$1"
    local TEST_ID="$2"

    # Iterate through all directories in the search directory
    for TEST_DIR in "$SEARCH_DIR"/*; do
        if [[ -d "$TEST_DIR" ]]; then
            METADATA_FILE="$TEST_DIR/metadata.yaml"
            if [[ -f "$METADATA_FILE" ]]; then
                TEST_ID_IN_METADATA=$(yq eval '.test_id' "$METADATA_FILE" 2>/dev/null)
                if [[ "$TEST_ID_IN_METADATA" == "$TEST_ID" ]]; then
                    echo "$TEST_DIR"  # Print the found directory path
                    return 0
                fi
            fi

            # Recursively search subdirectories (subtests)
            local RESULT
            RESULT=$(find_test_by_id_recursive "$TEST_DIR" "$TEST_ID")  # Capture output

            if [[ -n "$RESULT" ]]; then
                echo "$RESULT"  # Pass up the found path
                return 0
            fi
        fi
    done

    return 1  # Not found
    }

    # Function to re-index subtests after a test is removed
    reindex_subtests() {
        local PARENT_TEST_PATH="$1"
        local REMOVED_TEST_NAME="$2"
        local SUBTESTS_DIR="$PARENT_TEST_PATH/subtests"

        if [[ -d "$SUBTESTS_DIR" ]]; then
            SUBTESTS=$(ls -d "$SUBTESTS_DIR"/*)

            # Flag to mark if the renumbering process has started
            RENAMING_STARTED=false

            # Iterate through the subtests to renumber them
            for SUBTEST_PATH in $SUBTESTS; do
                if [[ -d "$SUBTEST_PATH" ]]; then
                    METADATA_FILE="$SUBTEST_PATH/metadata.yaml"
                    if [[ -f "$METADATA_FILE" ]]; then
                        # Get the subtest name and ID from metadata
                        TEST_NAME=$(yq eval '.test_name' "$METADATA_FILE")
                        
                        # If we haven't started renaming yet, and this is the subtest right after the removed test, start renaming
                        if [[ "$TEST_NAME" == "$REMOVED_TEST_NAME" ]]; then
                            RENAMING_STARTED=true
                            continue  # Skip the removed test
                        fi

                        # If renaming started, rename this subtest to the previous name
                        if $RENAMING_STARTED; then
                            NEW_TEST_NAME="${REMOVED_TEST_NAME%[a-z]*}a"  # Example renaming logic for simplicity

                            # Update the test name in metadata and directory
                            yq eval -i ".test_name = \"$NEW_TEST_NAME\"" "$METADATA_FILE"
                            mv "$SUBTEST_PATH" "$SUBTESTS_DIR/$NEW_TEST_NAME"  # Rename the subtest directory
                            echo "Renamed subtest from $TEST_NAME to $NEW_TEST_NAME"

                            # Update REMOVED_TEST_NAME for next iteration
                            REMOVED_TEST_NAME=$NEW_TEST_NAME
                        fi
                    fi
                fi
            done
        fi
    }

    # Update the main function to call reindex_subtests after removing a test
    remove_test() {
        if [[ -z "$1" ]]; then
            echo "Error: No test ID provided."
            exit 1
        fi

        ROOT_DIR=$(get_root_dir)  # Get the root directory of the project
        SETTINGS_FILE="$ROOT_DIR/settings.yaml"

        # Check if tests dir is completely empty
        if [[ ! "$(ls -A $ROOT_DIR/Tests)" ]]; then
            echo "Error: No tests found in the project."
            exit 1
        fi

        # Retrieve settings from settings.yaml
        TESTS_DIR=$(yq eval 'project.tests_dir' "$SETTINGS_FILE")
        BINARIES_DIR=$(yq eval 'project.binaries_dir' "$SETTINGS_FILE")

        TEST_PATH=$(find_test_by_id_recursive "$ROOT_DIR/$TESTS_DIR" "$1")

        if [[ -z "$TEST_PATH" || ! -d "$TEST_PATH" ]]; then
            echo "Error: Test with ID '$1' does not exist."
            exit 1
        fi

        # Check if the test is a parent test
        matches=$(grep "parent_test: $1" "$ROOT_DIR/$TESTS_DIR"/*/metadata.yaml 2>/dev/null)

        if [[ $? -eq 0 ]]; then
            echo "Error: Test '$1' is a parent test and cannot be removed."
            echo "Found the following references:"
            echo "$matches"
            exit 1
        fi

        # Confirm the user wants to remove the test
        echo "Are you sure you want to remove test with ID '$1' and its subtests? (y/n): "
        read -p "Enter choice: " CONFIRM
        if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
            echo "Test removal aborted."
            exit 0
        fi

        # Get the test name to pass to reindex_subtests
        REMOVED_TEST_NAME=$(yq eval '.test_name' "$TEST_PATH/metadata.yaml")

        # Remove test directory and metadata
        METADATA_FILE="$TEST_PATH/metadata.yaml"
        if [[ -f "$METADATA_FILE" ]]; then
            rm "$METADATA_FILE"
            echo "Test metadata removed for test $REMOVED_TEST_NAME."
        fi

        # Remove the actual test directory
        rm -rf "$TEST_PATH"
        echo "Test $REMOVED_TEST_NAME removed."

        # Re-index the remaining subtests
        reindex_subtests "$TEST_PATH" "$REMOVED_TEST_NAME"

        # Optional: Handle the binary removal process
        # (The binary removal logic remains as previously implemented)
    }


    # Function to remove a test and update any tracking information
    remove_test() {
        if [[ -z "$1" ]]; then
            echo "Error: No test ID provided."
            exit 1
        fi

        ROOT_DIR=$(get_root_dir)  # Get the root directory of the project
        SETTINGS_FILE="$ROOT_DIR/settings.yaml"

        #Check if tests dir is completely empty
        if [[ ! "$(ls -A $ROOT_DIR/Tests)" ]]; then
            echo "Error: No tests found in the project."
            exit 1
        fi

        # Retrieve settings from settings.yaml
        TESTS_DIR=$(yq eval '.project.tests_dir' "$SETTINGS_FILE")
        BINARIES_DIR=$(yq eval '.project.binaries_dir' "$SETTINGS_FILE")

        TEST_PATH=$(find_test_by_id_recursive "$ROOT_DIR/$TESTS_DIR" "$1")

        if [[ -z "$TEST_PATH" || ! -d "$TEST_PATH" ]]; then
            echo "Error: Test with ID '$1' does not exist."
            exit 1
        fi
        

        # Check if the test is a parent test
        matches=$(grep "parent_test: $1" "$ROOT_DIR/$TESTS_DIR"/*/metadata.yaml)

        if [[ $? -eq 0 ]]; then
            echo "Error: Test '$1' is a parent test and cannot be removed."
            echo "Found the following references:"
            echo "$matches"
            exit 1
        fi

        # Confirm the user wants to remove the test and list all subtests with details
        echo "Searching for subtests under test '$1'..."
        SUBTEST_COUNT=0  # Initialize subtest count

        if [[ -d "$TEST_PATH" ]]; then
            echo "Found subtests:"
            find_subtests "$TEST_PATH"
            SUBTEST_COUNT=$?  # Capture the return value of find_subtests function
            echo "Total subtests found: $SUBTEST_COUNT"
        else
            echo "Error: Test with ID '$1' does not exist."
            exit 1
        fi

        read -p "Are you sure you want to remove test with ID '$1' and all its subtests? (y/n): " CONFIRM
        if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
            echo "Test removal aborted."
            exit 0
        fi

        # Remove test metadata and directory
        METADATA_FILE="$TEST_PATH/metadata.yaml"
        if [[ -f "$METADATA_FILE" ]]; then
            echo "Removing metadata for test with ID '$1'..."
            PARENT_TEST=$(yq eval '.parent_test' "$METADATA_FILE")
            if [[ -n "$PARENT_TEST" ]]; then
                PARENT_TEST_PATH="$ROOT_DIR/$TESTS_DIR/$PARENT_TEST/metadata.yaml"
                if [[ -f "$PARENT_TEST_PATH" ]]; then
                    yq eval -i '.parent_test = null' "$PARENT_TEST_PATH"
                    echo "Updated parent test '$PARENT_TEST' to remove reference to '$1'."
                fi
            fi
            rm "$METADATA_FILE"
            echo "Metadata for test with ID '$1' removed."
        fi

        # Backup test directory before deletion
        read -p "Do you want to create a backup of the test before deletion? (y/n): " BACKUP_CONFIRM
        if [[ "$BACKUP_CONFIRM" =~ ^[Yy]$ ]]; then
            BACKUP_DIR="$TEST_PATH-backup"
            cp -r "$TEST_PATH" "$BACKUP_DIR"
            echo "Backup created at $BACKUP_DIR"
        fi

        echo "Removing test directory '$TEST_PATH'..."
        rm -rf "$TEST_PATH"
        echo "Test directory '$TEST_PATH' removed."

        # Check if the binary was unique to this test and remove it if necessary
        BINARY_FILE="$ROOT_DIR/$BINARIES_DIR/$1"
        if [[ -f "$BINARY_FILE" ]]; then
            if is_binary_used_by_other_tests "$ROOT_DIR" "$BINARIES_DIR" "$1"; then
                echo "Binary for test with ID '$1' is still in use by another test. Not removing the binary."
            else
                rm "$BINARY_FILE"
                echo "Binary for test with ID '$1' removed."
            fi
        fi
    }

        # Reindex tests and subtests after removal
        reindex_subtests "$TEST_PATH" "$REMOVED_TEST_NAME"
        

    # Run the function with the first argument passed to the script
    remove_test "$1"