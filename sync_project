#!/bin/bash

# Define locations
WORKSTATION_PATH="/home/mk7641/storage/ACCESS/TestingScripts"
JUBAIL_HPC_PATH="/scratch/mk7641/Projects"
JUBAIL_HOST="mk7641@jubail.abudhabi.nyu.edu"

HPC_SYMLINK_PREFIX="/scratch/mk7641/croco_scripts/"
WORKSTATION_SYMLINK_PREFIX="/home/mk7641/storage/ACCESS/croco_scripts/"


# Function to extract project name from settings.yaml
extract_project_name() {
  local settings_file="$1"
  local root_dir
  root_dir=$(grep "root_dir:" "$settings_file" | awk -F'"' '{print $2}')
  
  if [[ -z "$root_dir" ]]; then
    echo "Error: Could not extract root_dir from $settings_file"
    exit 1
  fi

  echo "$(basename "$root_dir")"
}

get_root_dir() {
    local dir="$(pwd)"
    while [[ ! -f "$dir/settings.yaml" && "$dir" != "/" ]]; do
        dir=$(dirname "$dir")  # Move up one directory level
    done

    if [[ -f "$dir/settings.yaml" ]]; then
        echo "$dir"
    else
        echo "Error: settings.yaml not found in any parent directory."
        exit 1
    fi
}

SETTINGS_FILE=$(get_root_dir)/settings.yaml
SRC_PROJECT_NAME=$(extract_project_name "$SETTINGS_FILE")
WORKSTATION_PATH="$WORKSTATION_PATH/$SRC_PROJECT_NAME"
JUBAIL_HPC_PATH="$JUBAIL_HPC_PATH/$SRC_PROJECT_NAME"

echo "Source project name: $SRC_PROJECT_NAME"
echo "Workstation path: $WORKSTATION_PATH"
echo "Jubail HPC path: $JUBAIL_HPC_PATH"


update_remote_symlinks() {

  echo "Modifying symlinks in $JUBAIL_HPC_PATH/Tests on $JUBAIL_HOST..."

  ssh "$JUBAIL_HOST" "find \"$JUBAIL_HPC_PATH/Tests\" -type l -name '*.nc' -print0 | xargs -0 -I {} bash -c '
    SOURCE_PREFIX_REMOTE=\"'\\\"$WORKSTATION_SYMLINK_PREFIX\\\"'\";  # Properly escaped and quoted
    DEST_PREFIX_REMOTE=\"'\\\"$HPC_SYMLINK_PREFIX\\\"'\";    # Properly escaped and quoted
    target=\"\$(readlink {})\";

    if [[ \"\$target\" == \"\$SOURCE_PREFIX_REMOTE\"* ]]; then
      stripped_target=\"\${target#\$SOURCE_PREFIX_REMOTE}\";
      new_target=\"\$DEST_PREFIX_REMOTE\$stripped_target\";
      if [[ ! -e \"\$new_target\" ]]; then
        echo \"Warning: Target \$new_target does not exist!\"
      fi;
      ln -snf \"\$new_target\" \"{}\";
      if [[ ! -h \"{}\" ]]; then
        echo \"Warning: {} is not a symlink after update!\"
      fi;
    else
      stripped_target="\$target";
    fi

    '"

}

update_local_symlinks() {
  local source_path="$WORKSTATION_PATH/Tests"  # Hardcoded source path
  local source_prefix="$HPC_SYMLINK_PREFIX" # Hardcoded source prefix
  local dest_prefix="$WORKSTATION_SYMLINK_PREFIX"   # Hardcoded destination prefix

  echo "Modifying symlinks in $source_path..."

  # cd to the source directory
  cd "$source_path"
  echo "Current directory: $(pwd)"

  local local_test_dir="$WORKSTATION_PATH/Tests"  # Hardcoded source path
  local source_prefix="$HPC_SYMLINK_PREFIX" # Hardcoded source prefix
  local dest_prefix="$WORKSTATION_SYMLINK_PREFIX"   # Hardcoded destination prefix

  echo "Modifying symlinks in $local_test_dir..."

  # iterate over all the directories in the Tests directory
  for test_dir in $local_test_dir/*; do
    #goto the inputs directory of the test directory
    echo "Processing $test_dir"
    #iterate over all the files in the inputs directory that are .nc files
    for file in $test_dir/inputs/*.nc; do
      #get the target of the symlink
      target=$(readlink "$file")
      echo "Processing $file -> $target"
      #check if the target is a symlink and if it starts with the source prefix
      if [[ -L "$file" && "$target" == "$source_prefix"* ]]; then
        #strip the source prefix from the target
        stripped_target="${target#$source_prefix}"
        #create the new target by adding the destination prefix to the stripped target
        new_target="$dest_prefix$stripped_target"
        #check if the new target exists
        if [[ ! -e "$new_target" ]]; then
          echo "Warning: Target $new_target does not exist!"
          #continue to the next file
          continue
        fi
        #update the symlink
        ln -snf "$new_target" "$file"
        #check if the file is still a symlink after updating
        if [[ ! -h "$file" ]]; then
          echo "Warning: $file is not a symlink after update!"
        fi
      fi
      done
    done
}


# Function to sync from Jubail HPC to Workstation (full copy)
sync_from_hpc() {
  echo "Syncing from Jubail HPC to Workstation..."
  
  scp "$JUBAIL_HOST:$JUBAIL_HPC_PATH/$SETTINGS_FILE" "/tmp/destination_settings.yaml" > /dev/null 2>&1
  echo "Source project name: $SRC_PROJECT_NAME"
  DEST_PROJECT_NAME=$(extract_project_name "/tmp/destination_settings.yaml")

  if [ "$SRC_PROJECT_NAME" != "$DEST_PROJECT_NAME" ]; then
    echo "Error: Project names do not match!"
    exit 1
  fi

  # Sync only the Binaries and Tests directories
  rsync -avz --ignore-existing \
    --include="Tests/**" \
    --include="Binaries/**" \
    "$JUBAIL_HOST:$JUBAIL_HPC_PATH/" "$WORKSTATION_PATH/"

  update_local_symlinks

  echo "Sync complete!"
}

# Function to sync from Workstation to Jubail HPC (only binaries & directory structure)
sync_to_hpc() {
  echo "Syncing from Workstation to Jubail HPC (excluding outputs)..."
  
  scp "$JUBAIL_HOST:$JUBAIL_HPC_PATH/$SETTINGS_FILE" "/tmp/destination_settings.yaml" > /dev/null 2>&1

  DEST_PROJECT_NAME=$(extract_project_name "/tmp/destination_settings.yaml")

  if [ "$SRC_PROJECT_NAME" != "$DEST_PROJECT_NAME" ]; then
    echo "Error: Project names do not match!"
    exit 1
  fi

  rsync -avz --ignore-existing \
    --include="Tests/**" \
    --exclude="Tests/**/outputs/**" \
    "$WORKSTATION_PATH/" "$JUBAIL_HOST:$JUBAIL_HPC_PATH/"
  
  update_remote_symlinks

  echo "Sync complete!"
}

# Prompt user for sync direction
echo "Choose sync direction:"
echo "1) Sync from Jubail HPC → Workstation (Binaries and Tests)"
echo "2) Sync from Workstation → Jubail HPC (Test Structure Only)"
read -p "Enter choice [1 or 2]: " choice

case $choice in
  1) sync_from_hpc ;;
  2) sync_to_hpc ;;
  *) echo "Invalid choice, exiting."; exit 1 ;;
esac
