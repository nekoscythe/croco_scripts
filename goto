#!/bin/bash
# Navigation script for test directories

# Utility functions
log_error() {
    echo "Error: $1" >&2
}

log_info() {
    echo "Info: $1"
}

# Core directory functions
find_root_dir() {
    local dir="$(pwd)"
    while [[ ! -f "$dir/settings.yaml" && "$dir" != "/" ]]; do
        dir=$(dirname "$dir")
    done

    if [[ -f "$dir/settings.yaml" ]]; then
        echo "$dir"
        return 0
    else
        log_error "Root directory not found. Ensure settings.yaml exists in project root."
        return 1
    fi
}

get_tests_dir() {
    local root_dir="$1"
    local settings_file="$root_dir/settings.yaml"

    if ! command -v yq >/dev/null 2>&1; then
        log_error "yq is required but not installed"
        return 1
    fi

    if [[ ! -f "$settings_file" ]]; then
        log_error "Settings file not found"
        return 1
    fi

    local tests_dir
    tests_dir=$(yq eval '.project.tests_dir' "$settings_file" | xargs) || return 1
    echo "$tests_dir"
}

# Test finding functions
find_matching_tests_by_id() {
    local test_id="$1"
    local search_dir="$2"
    local matches=()

    while IFS= read -r metadata_path; do
        if [[ -f "$metadata_path" ]]; then
            local current_test_id
            current_test_id=$(yq eval '.test_id' "$metadata_path" | xargs) || continue
            
            if [[ "$current_test_id" == "$test_id" ]]; then
                matches+=("$(dirname "$metadata_path")")
            fi
        fi
    done < <(find "$search_dir" -name metadata.yaml 2>/dev/null)

    # Return results
    if [[ ${#matches[@]} -eq 0 ]]; then
        return 1
    else
        printf "%s\n" "${matches[@]}"
        return 0
    fi
}

# User interaction function
select_test() {
    local -a tests=("$@")
    
    echo "Multiple tests found. Please select one:"
    for i in "${!tests[@]}"; do
        echo "$((i + 1)): ${tests[i]}"
    done

    local choice
    read -p "Enter selection number: " choice

    if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice > 0 && choice <= ${#tests[@]} )); then
        echo "${tests[$((choice - 1))]}"
        return 0
    else
        log_error "Invalid selection"
        return 1
    fi
}

# Main navigation function
goto_test() {
    local test_id="$1"
    local root_dir
    local tests_dir
    local full_tests_path
    local -a matching_tests

    # Find root directory
    root_dir=$(find_root_dir) || return 1

    # Get tests directory
    tests_dir=$(get_tests_dir "$root_dir") || return 1
    full_tests_path="$root_dir/$tests_dir"

    # Handle no test ID case (go to tests root)
    if [[ -z "$test_id" ]]; then
        if [[ -d "$full_tests_path" ]]; then
            log_info "Navigating to root test directory: $full_tests_path"
            cd "$full_tests_path" || return 1
            return 0
        else
            log_error "Tests directory not found in the project"
            return 1
        fi
    fi

    # Find matching tests by ID
    readarray -t matching_tests < <(find_matching_tests_by_id "$test_id" "$full_tests_path") || {
        log_error "Test ID '$test_id' not found"
        return 1
    }

    local target_dir
    if [[ ${#matching_tests[@]} -eq 1 ]]; then
        target_dir="${matching_tests[0]}"
        log_info "Navigating to test directory: $target_dir"
    else
        target_dir=$(select_test "${matching_tests[@]}") || return 1
        log_info "Navigating to selected test directory: $target_dir"
    fi

    cd "$target_dir" || {
        log_error "Failed to navigate to directory: $target_dir"
        return 1
    }
}

# Script execution guard
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    echo "Error: This script must be sourced to navigate. Use 'source $0 <test_id>'"
    exit 1
fi

# Execute navigation
goto_test "$1"
