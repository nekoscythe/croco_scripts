#!/bin/bash
# Initialize project directory structure using functional programming principles

set -euo pipefail

# Configuration defaults
declare FORCE_REINIT=false
declare DRY_RUN=false
declare VERBOSE=false
declare -r DEFAULT_CROCO_RELATIVE_PATH="../../croco"
declare -r CONFIRM_PHRASE="I understand that this will erase all existing data and cannot be undone"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
declare -r BASE_FILES_DIR="$SCRIPT_DIR/base_files"

# Print usage information
print_usage() {
    cat << EOF
Usage: $(basename "$0") [-F] [-d] [-v] [-h]
Initialize project directory structure and settings.

Options:
    -F    Force reinitialization (overwrite existing settings)
    -d    Dry run (show what would be done without making changes)
    -v    Verbose mode (show detailed output)
    -h    Show this help message
EOF
}

# Error handling function
error_exit() {
    echo "Error: $1" >&2
    exit "${2:-1}"
}

# Success message function
log_success() {
    echo "Success: $1"
}

# Warning message function
log_warning() {
    echo "Warning: $1" >&2
}

# Verbose logging function
log_verbose() {
    if [[ "$VERBOSE" == true ]]; then
        echo "Verbose: $1"
    fi
}

# Find project root directory
find_root_dir() {
    local dir="$(pwd)"
    while [[ ! -f "$dir/settings.yaml" && "$dir" != "/" ]]; do
        dir=$(dirname "$dir")
    done
    echo "$dir"
}

# Validate directory exists and is writable
validate_directory() {
    local dir="$1"
    [[ ! -d "$dir" ]] && error_exit "Directory $dir does not exist"
    [[ ! -w "$dir" ]] && error_exit "No write permission in $dir"
    return 0
}

# Parse command line arguments
parse_arguments() {
    while getopts "Fdvh" opt; do
        case $opt in
            F) FORCE_REINIT=true ;;
            d) DRY_RUN=true ;;
            v) VERBOSE=true ;;
            h) print_usage; exit 0 ;;
            *) print_usage; exit 1 ;;
        esac
    done
}

# Initialize project paths
init_paths() {
    local root_dir="$1"
    local paths
    declare -A paths
    paths[ROOT_DIR]="$root_dir"
    paths[SETTINGS_FILE]="$root_dir/settings.yaml"
    paths[TESTS_DIR]="$root_dir/Tests"
    paths[BINARIES_DIR]="$root_dir/Binaries"
    paths[CROCO_DIR]=$(realpath "$root_dir/$DEFAULT_CROCO_RELATIVE_PATH" 2>/dev/null || echo "")
    paths[BASE_FILES_DIR]="$BASE_FILES_DIR"
    paths[CPPDEFS_FILE]="$root_dir/cppdefs.h"
    paths[BIO_NCHL_FILE]="$root_dir/bio_NChlPZD.F"
    paths[T3DMIX_FILE]="$root_dir/t3dmix_S.F"
    paths[COMPILE_SCRIPT]="$root_dir/jobcomp"
    echo "$(declare -p paths)"
}

# Validate CROCO directory
validate_croco_dir() {
    local croco_dir="$1"
    if [[ ! -d "$croco_dir" ]]; then
        log_warning "CROCO directory not found at $croco_dir"
        read -p "Continue anyway? (y/N) " -r
        [[ ! $REPLY =~ ^[Yy]$ ]] && error_exit "CROCO directory validation failed"
    fi
}

# Backup existing settings
backup_settings() {
    local settings_file="$1"
    if [[ -f "$settings_file" ]]; then
        local backup_dir="$(dirname "$settings_file")/backups"
        mkdir -p "$backup_dir"
        local backup_file="${backup_dir}/settings.yaml.$(date +%Y%m%d_%H%M%S).bak"
        if cp "$settings_file" "$backup_file"; then
            log_success "Created backup: $backup_file"
        else
            error_exit "Failed to create backup for $settings_file"
        fi
    else
        log_warning "Settings file '$settings_file' does not exist."
    fi
}

# List existing tests and subtests
list_tests_and_subtests() {
    local tests_dir="$1"
    echo "Existing tests and subtests that will be deleted:"
    echo "-----------------------------------------------"
    find "$tests_dir" -mindepth 1 -maxdepth 1 -type d | while read -r test_dir; do
        echo "Test: $(basename "$test_dir")"
        find "$test_dir/subtests" -mindepth 1 -maxdepth 1 -type d 2>/dev/null | while read -r subtest_dir; do
            echo "  Subtest: $(basename "$subtest_dir")"
        done
    done
    echo "-----------------------------------------------"
}

# Confirm destructive action with a long phrase
confirm_destructive_action() {
    echo "WARNING: This action will erase all existing data and cannot be undone."
    echo "To confirm, type the following phrase exactly:"
    echo ""
    echo "  $CONFIRM_PHRASE"
    echo ""
    read -p "> " -r USER_INPUT
    if [[ "$USER_INPUT" != "$CONFIRM_PHRASE" ]]; then
        error_exit "Confirmation phrase does not match. Aborting."
    fi
    log_success "Destructive action confirmed."
}

copy_base_files() {
    local base_files_dir="$1"
    local root_dir="$2"

    if [[ ! -d "$base_files_dir" ]]; then
        log_warning "Base files directory '$base_files_dir' not found."
        return 1
    fi

    cp -r "$base_files_dir"/* "$root_dir/"

}


# Modify the jobcomp script to update the SOURCE variable
modify_jobcomp_script() {
    local compile_script="$1"
    local croco_dir="$2"
    if [[ -f "$compile_script" ]]; then
        if [[ "$DRY_RUN" == false ]]; then
            sed -i "s|^SOURCE=.*|SOURCE=$croco_dir/OCEAN|" "$compile_script"
            #make the script executable
            chmod +x "$compile_script"
            log_success "Updated jobcomp script with SOURCE=$croco_dir/OCEAN"
        else
            log_verbose "Dry run: Would update jobcomp script with SOURCE=$croco_dir/OCEAN"
        fi
    else
        log_warning "Compile script '$compile_script' not found."
    fi
}

# Generate settings content
generate_settings() {
    local root_dir="$1"
    local croco_dir="$2"
    cat <<EOL
# Project Settings
project:
  root_dir: &root_dir "$root_dir"
  tests_dir: "Tests"
  binaries_dir: "Binaries"
  base_inputs_dir: "base_inputs"
  croco_dir: &croco_dir "$croco_dir"
  created_at: "$(date +'%Y-%m-%dT%H:%M:%SZ')"
  last_modified: "$(date +'%Y-%m-%dT%H:%M:%SZ')"

# Dependency Tracking
dependencies:
  - location: *root_dir
    path: "cppdefs.h"
  - location: *root_dir
    path: "param.h"
  - location: *croco_dir
    path: "OCEAN/bio_NChlPZD.F"
  - location: *croco_dir
    path: "OCEAN/t3dmix_S.F"

# Scripts
scripts:
  compile: "./jobcomp"
  browse_tests: "./browse_tests.py"
EOL
}

# Generate gitignore content
generate_gitignore() {
    cat <<EOL
# Generated directories
Binaries/*
!Binaries/.gitkeep

# Backup files
*.bak
*.backup
*~

# System files
.DS_Store
Thumbs.db
EOL
}

# Create project directories
create_directories() {
    local tests_dir="$1"
    local binaries_dir="$2"
    
    if [[ "$FORCE_REINIT" == true ]]; then
        log_verbose "Force reinitialization enabled. Removing existing directories."
        if [[ "$DRY_RUN" == false ]]; then
            rm -rf "$tests_dir" "$binaries_dir"
        else
            log_verbose "Dry run: Would remove $tests_dir and $binaries_dir"
        fi
    fi

    if [[ "$DRY_RUN" == false ]]; then
        mkdir -p "$tests_dir" "$binaries_dir"
        chmod 755 "$tests_dir" "$binaries_dir"
        log_success "Created project directories"
    else
        log_verbose "Dry run: Would create $tests_dir and $binaries_dir"
    fi
}

# Validate compilation script
validate_compile_script() {
    local compile_script="$1"
    if [[ ! -f "$compile_script" || ! -x "$compile_script" ]]; then
        error_exit "Compilation script '$compile_script' not found or not executable"
    fi
}

# Write settings file
write_settings() {
    local settings_file="$1"
    local root_dir="$2"
    local croco_dir="$3"
    
    if [[ "$DRY_RUN" == false ]]; then
        generate_settings "$root_dir" "$croco_dir" > "$settings_file"
        log_success "Created settings file"
    else
        log_verbose "Dry run: Would write settings to $settings_file"
    fi
}

# Write gitignore file
write_gitignore() {
    local root_dir="$1"
    local gitignore_file="$root_dir/.gitignore"
    
    if [[ ! -f "$gitignore_file" ]]; then
        if [[ "$DRY_RUN" == false ]]; then
            generate_gitignore > "$gitignore_file"
            log_success "Created .gitignore file"
        else
            log_verbose "Dry run: Would create .gitignore file"
        fi
    fi
}

# Main function to orchestrate initialization
main() {
    parse_arguments "$@"
    
    # Find or create the root directory
    local root_dir=$(find_root_dir)
    if [[ "$root_dir" == "/" ]]; then
        log_warning "No existing project found. Creating a new project."
        read -p "Enter a name for the new project: " PROJECT_NAME
        root_dir="$(pwd)/$PROJECT_NAME"
        mkdir -p "$root_dir"
        log_success "Created new project directory: $root_dir"
    fi

    # Initialize and validate paths
    eval "$(init_paths "$root_dir")"
    validate_croco_dir "${paths[CROCO_DIR]}"
    
    # Check existing settings
    if [[ -f "${paths[SETTINGS_FILE]}" && "$FORCE_REINIT" == false ]]; then
        error_exit "settings.yaml already exists. Use -F flag to force reinitialization"
    fi
    
    # Perform initialization
    if [[ "$FORCE_REINIT" == true ]]; then
        log_verbose "Force reinitialization enabled. Backing up existing settings."
        backup_settings "${paths[SETTINGS_FILE]}"
        
        # List existing tests and subtests
        list_tests_and_subtests "${paths[TESTS_DIR]}"
        
        # Confirm destructive action
        confirm_destructive_action
    fi

    # Copy base files
    copy_base_files "${paths[BASE_FILES_DIR]}" "${paths[ROOT_DIR]}"

    # Modify jobcomp script
    modify_jobcomp_script "${paths[COMPILE_SCRIPT]}" "${paths[CROCO_DIR]}"

    # Create directories
    create_directories "${paths[TESTS_DIR]}" "${paths[BINARIES_DIR]}"
    write_settings "${paths[SETTINGS_FILE]}" "${paths[ROOT_DIR]}" "${paths[CROCO_DIR]}"
    write_gitignore "${paths[ROOT_DIR]}"
    validate_compile_script "${paths[COMPILE_SCRIPT]}"
    
    # Final success message
    log_success "Project initialization complete!"
    echo "Created directories:"
    echo "  - Tests: ${paths[TESTS_DIR]}"
    echo "  - Binaries: ${paths[BINARIES_DIR]}"
    echo "Settings file: ${paths[SETTINGS_FILE]}"
}

# Execute main function
main "$@"