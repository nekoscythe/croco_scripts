#!/bin/bash
# Initialize the project directory structure and settings.

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BASE_FILES_DIR="$SCRIPT_DIR/base_files"  # Path to base_files directory

# Function to get the root directory of the project by looking for settings.yaml
get_root_dir() {
    DIR="$(pwd)"
    while [[ ! -f "$DIR/settings.yaml" && "$DIR" != "/" ]]; do
        DIR=$(dirname "$DIR")
    done

    if [[ -f "$DIR/settings.yaml" ]]; then
        echo "$DIR"
    else
        echo "No existing project found. Creating a new project."
        return 1
    fi
}

# Try to get the root directory
if ! ROOT_DIR=$(get_root_dir); then
    # If no settings.yaml is found, ask for a project name
    read -p "Enter a name for the new project: " PROJECT_NAME
    PROJECT_DIR="$(pwd)/$PROJECT_NAME"
    
    # Create the project directory
    mkdir -p "$PROJECT_DIR"
    echo "Created new project directory: $PROJECT_DIR"
    
    # Set the root directory to the new project directory
    ROOT_DIR="$PROJECT_DIR"
fi

# Set paths relative to the root directory
SETTINGS_FILE="$ROOT_DIR/settings.yaml"
TESTS_DIR="$ROOT_DIR/Tests"
BINARIES_DIR="$ROOT_DIR/Binaries"
CROCO_DIR_RELATIVE="../../croco"  # Relative path for croco, adjusted from absolute path
CROCO_DIR=$(realpath "$ROOT_DIR/$CROCO_DIR_RELATIVE")  # Resolve relative path to absolute

CPPDEFS_FILE="$CROCO_DIR/OCEAN/cppdefs.h"
BIO_NCHL_FILE="$CROCO_DIR/OCEAN/bio_NChlPZD.F"
T3DMIX_FILE="$CROCO_DIR/OCEAN/t3dmix_S.F"
COMPILE_SCRIPT="$ROOT_DIR/jobcomp"

FORCE_REINIT=false

# Parse the -F flag
if [[ "$1" == "-F" ]]; then
    FORCE_REINIT=true
    echo "Force reinitialization enabled. Existing settings and directories will be overwritten."
fi

# Check if settings.yaml exists
if [[ -f "$SETTINGS_FILE" && "$FORCE_REINIT" == false ]]; then
    echo "settings.yaml already exists. Use -F flag to force reinitialization."
    exit 0
fi

# Copy base files to the root directory
echo "Copying base files from $BASE_FILES_DIR to $ROOT_DIR..."
cp -r "$BASE_FILES_DIR"/* "$ROOT_DIR/"
echo "Base files copied."

# Modify the jobcomp script to update the SOURCE variable
echo "Updating jobcomp script..."
sed -i "s|^SOURCE=.*|SOURCE=$CROCO_DIR/OCEAN|" "$COMPILE_SCRIPT"
echo "jobcomp script updated."

# Create or overwrite settings.yaml
echo "Creating settings.yaml..."
cat > "$SETTINGS_FILE" <<EOL
# Project Settings
project:
  root_dir: &root_dir "$ROOT_DIR"
  tests_dir: "Tests"
  binaries_dir: "Binaries"
  base_files_dir: "base_files"
  croco_dir: &croco_dir "$CROCO_DIR"
  created_at: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  last_modified: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

# Dependency Tracking
dependencies:
  - location: *root_dir
    path: "cppdefs.h"
  - location: *croco_dir
    path: "OCEAN/bio_NChlPZD.F"
  - location: *croco_dir
    path: "OCEAN/t3dmix_S.F"

# Scripts
scripts:
  compile: "jobcomp"
  browse_tests: "browse_tests.py"
EOL
echo "settings.yaml created or overwritten."

# Create directory structure
if [[ "$FORCE_REINIT" == true ]]; then
    echo "Removing existing directories..."
    rm -rf "$TESTS_DIR" "$BINARIES_DIR"
fi

mkdir -p "$TESTS_DIR" "$BINARIES_DIR"
echo "Project initialized. Tests and Binaries directories created."

# If the jobcomp script doesn't exist, give an error message
if [[ ! -f "$COMPILE_SCRIPT" || ! -x "$COMPILE_SCRIPT" ]]; then
    echo "Error: Compilation script '$COMPILE_SCRIPT' not found or not executable. Please check the path."
    exit 1
fi