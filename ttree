#!/bin/bash

# Function to find the root directory by locating settings.yaml
find_root_dir() {
    local DIR="$(pwd)"
    while [[ ! -f "$DIR/settings.yaml" && "$DIR" != "/" ]]; do
        DIR=$(dirname "$DIR")
    done

    if [[ -f "$DIR/settings.yaml" ]]; then
        echo "$DIR"
    else
        echo "Error: Root directory not found. Ensure settings.yaml exists in the project root."
        exit 1
    fi
}

# Function to recursively build the test tree with color-coded statuses
build_test_tree() {
    local DIR="$1"
    local PREFIX="$2"
    local IS_LAST="$3"

    # Read metadata.yaml to get test name and test ID
    local METADATA_FILE="$DIR/metadata.yaml"
    if [[ -f "$METADATA_FILE" ]]; then
        local TEST_ID=$(yq eval '.test_id' "$METADATA_FILE")
        local TEST_NAME=$(yq eval '.test_name' "$METADATA_FILE")
    else
        return
    fi

    # Determine test status
    local LOG_FILE="$DIR/outputs/run_test.log"
    local PREPROCESSED_FILE="$DIR/outputs/output_his_preprocessed.nc"
    local STATUS_COLOR=""
    local STATUS=""

    if [[ ! -f "$LOG_FILE" ]]; then
        STATUS_COLOR="\e[33m"  # Yellow (Not Run)
        STATUS="[Not Run]"
    else
        local LAST_LINE=$(tail -n 1 "$LOG_FILE")
        if grep -q "Error" "$LOG_FILE"; then  # Check for errors first
            STATUS_COLOR="\e[31m"  # Red (Failed)
            STATUS="[Failed]"
        elif grep -q "started time-stepping" "$LOG_FILE"; then  # Check if started
            if grep -q "MAIN: DONE" "$LOG_FILE"; then  # Check if completed
            # check if preprocessed file exists
                if [[ -f "$PREPROCESSED_FILE" ]]; then
                    STATUS_COLOR="\e[92m"  # Bright Green (Passed and Preprocessed)
                    STATUS="[Passed and Preprocessed]"
                else
                    STATUS_COLOR="\e[32m"  # Green (Passed)
                    STATUS="[Passed]"
                fi
            else  # Started but not finished
                STATUS_COLOR="\e[35m"  # Magenta (Running)
                STATUS="[Running]"
            fi
        else # Log file exists, but doesn't have "started time-stepping"
            STATUS_COLOR="\e[36m" # Cyan (Unknown/Incomplete)
            STATUS="[Incomplete/Unknown]"
        fi
    fi

    # Print test entry with color
    if [[ "$IS_LAST" == "true" ]]; then
        echo -e "${PREFIX}└── ${STATUS_COLOR}(ID: $TEST_ID) $TEST_NAME $STATUS\e[0m"
    else
        echo -e "${PREFIX}├── ${STATUS_COLOR}(ID: $TEST_ID) $TEST_NAME $STATUS\e[0m"
    fi

    # Find and display subtests
    local SUBTESTS_DIR="$DIR/subtests"
    if [[ -d "$SUBTESTS_DIR" ]]; then
        local SUBTESTS=("$SUBTESTS_DIR"/*)
        local SUBTESTS_WITH_METADATA=()

        for SUBTEST in "${SUBTESTS[@]}"; do
            if [[ -d "$SUBTEST" ]]; then
                local SUBTEST_METADATA_FILE="$SUBTEST/metadata.yaml"
                if [[ -f "$SUBTEST_METADATA_FILE" ]]; then
                    local SUBTEST_NAME=$(yq eval '.description' "$SUBTEST_METADATA_FILE")
                    local SUBTEST_ID=$(yq eval '.test_id' "$SUBTEST_METADATA_FILE")
                    SUBTESTS_WITH_METADATA+=("$SUBTEST|$SUBTEST_NAME|$SUBTEST_ID")
                fi
            fi
        done

        # Sort by test ID numerically
        IFS=$'\n' sorted_subtests=($(for subtest in "${SUBTESTS_WITH_METADATA[@]}"; do 
            echo "$subtest"; 
        done | sort -t '|' -k3 -n))
        unset IFS

        local COUNT=${#sorted_subtests[@]}
        local INDEX=0

        for SUBTEST_METADATA in "${sorted_subtests[@]}"; do
            IFS='|' read -r SUBTEST_DIR SUBTEST_NAME SUBTEST_ID <<< "$SUBTEST_METADATA"
            INDEX=$((INDEX + 1))
            if [[ $INDEX -eq $COUNT ]]; then
                build_test_tree "$SUBTEST_DIR" "${PREFIX}    " "true"
            else
                build_test_tree "$SUBTEST_DIR" "${PREFIX}│   " "false"
            fi
        done
    fi
}
extract_number_prefix() {
    local input="$1"
    if [[ "$input" =~ ^([0-9]+) ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        echo ""
    fi
}

# Function to find a specific test directory by test ID
find_test_by_id() {
    local ROOT_DIR="$1"
    local TARGET_ID="$2"
    
    # Input validation
    if [[ -z "$ROOT_DIR" || -z "$TARGET_ID" ]]; then
        echo "Error: ROOT_DIR and TARGET_ID are required" >&2
        return 1
    fi
    
    # Check if yq is available
    if ! command -v yq >/dev/null 2>&1; then
        echo "Error: yq command not found" >&2
        return 1
    fi
    
    # Start from Tests directory
    local TESTS_DIR="$ROOT_DIR/Tests"
    
    if [[ ! -d "$TESTS_DIR" ]]; then
        echo "Error: Tests directory not found at $TESTS_DIR." >&2
        return 1
    fi
    
    # Search function that checks a directory and its subtests recursively
    search_directory() {
        local DIR="$1"
        
        # Check if this directory has metadata.yaml
        local METADATA_FILE="$DIR/metadata.yaml"
        if [[ -f "$METADATA_FILE" ]]; then
            local TEST_ID=$(yq eval '.test_id' "$METADATA_FILE" 2>/dev/null)
            if [[ $? -ne 0 || -z "$TEST_ID" || "$TEST_ID" == "null" ]]; then
                printf "Warning: Could not read test_id from $METADATA_FILE\n" >&2
            else
                # Direct string comparison for alphanumeric IDs
                if [[ "$TEST_ID" == "$TARGET_ID" ]]; then
                    echo "$DIR"
                    return 0
                fi
            fi
        fi
        
        # Search in subtests directory if it exists
        local SUBTESTS_DIR="$DIR/subtests"
        if [[ -d "$SUBTESTS_DIR" ]]; then
            # Enable nullglob to handle case where no subdirectories exist
            local old_nullglob=$(shopt -p nullglob)
            shopt -s nullglob
            
            for SUBTEST_DIR in "$SUBTESTS_DIR"/*/; do
                if [[ -d "$SUBTEST_DIR" ]]; then
                    # Fix: Call function directly in if condition
                    if search_directory "$SUBTEST_DIR"; then
                        # Restore nullglob setting
                        $old_nullglob
                        return 0
                    fi
                fi
            done
            
            # Restore nullglob setting
            $old_nullglob
        fi
        
        return 1
    }
    
    # Enable nullglob for the main search loop
    local old_nullglob=$(shopt -p nullglob)
    shopt -s nullglob
    
    # Search through all directories that start with "Test" in the Tests folder
    for TEST_DIR in "$TESTS_DIR"/Test*/; do
        if [[ -d "$TEST_DIR" ]]; then
            # Fix: Call function directly in if condition
            if search_directory "$TEST_DIR"; then
                # Restore nullglob setting
                $old_nullglob
                return 0
            fi
        fi
    done
    
    # Restore nullglob setting
    $old_nullglob
    
    printf "Test with ID '$TARGET_ID' not found\n" >&2
    return 1
}


# Function to display the test tree
show_test_tree() {
    local ROOT_DIR="$1"
    local TARGET_TEST_ID="$2"
    
    # If a specific test ID is provided, show only that subtree
    if [[ -n "$TARGET_TEST_ID" ]]; then
        local TEST_DIR=$(find_test_by_id "$ROOT_DIR" "$TARGET_TEST_ID")
        if [[ $? -eq 0 && -n "$TEST_DIR" ]]; then
            echo ""
            echo "Test Subtree for Test ID $TARGET_TEST_ID:"
            echo "----------------------------------------"
            build_test_tree "$TEST_DIR" "" "true"
        else
            echo "Error: Test with ID '$TARGET_TEST_ID' not found."
            exit 1
        fi
        echo ""
        return
    fi

    # Show all tests
    local TESTS_DIR="$ROOT_DIR/Tests"

    if [[ ! -d "$TESTS_DIR" ]]; then
        echo "Error: Tests directory not found at $TESTS_DIR."
        exit 1
    fi

    echo ""
    echo "Test Tree:"
    echo "----------"

    # Iterate through all directories that start with "Test" in the Tests directory
    local TESTS=("$TESTS_DIR"/Test*)
    local TESTS_WITH_METADATA=()

    # Collect all tests and their metadata
    for TEST in "${TESTS[@]}"; do
        if [[ -d "$TEST" ]]; then
            local METADATA_FILE="$TEST/metadata.yaml"
            if [[ -f "$METADATA_FILE" ]]; then
                local TEST_NAME=$(yq eval '.description' "$METADATA_FILE")
                local TEST_ID=$(yq eval '.test_id' "$METADATA_FILE")
                TESTS_WITH_METADATA+=("$TEST|$TEST_NAME|$TEST_ID")
            fi
        fi
    done

    # Sort the tests by test ID numerically
    IFS=$'\n' sorted_tests=($(for test in "${TESTS_WITH_METADATA[@]}"; do 
        echo "$test"; 
    done | sort -t '|' -k3 -n))
    unset IFS

    # Iterate over sorted tests and display them
    local COUNT=${#sorted_tests[@]}
    local INDEX=0

    for TEST_METADATA in "${sorted_tests[@]}"; do
        IFS='|' read -r TEST_DIR TEST_NAME TEST_ID <<< "$TEST_METADATA"
        INDEX=$((INDEX + 1))
        if [[ $INDEX -eq $COUNT ]]; then
            build_test_tree "$TEST_DIR" "" "true"
        else
            build_test_tree "$TEST_DIR" "" "false"
        fi
    done

    echo ""
}

# Function to show usage
show_usage() {
    echo "Usage: ttree [test_id]"
    echo "  test_id: Optional. Show only the subtree for the specified test ID"
    echo "  If no test_id is provided, shows all tests"
    echo ""
    echo "Examples:"
    echo "  ttree        # Show all tests"
    echo "  ttree 5      # Show only test 5 and its subtests"
    echo "  ttree 12a     # Show only test 12a and its subtests"
}

# Main script execution
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_usage
    exit 0
fi

ROOT_DIR=$(find_root_dir)  # Find the root directory
show_test_tree "$ROOT_DIR" "$1"  # Display the test tree (optionally filtered by test ID)