#!/bin/bash

# Function to find the root directory by locating settings.yaml
find_root_dir() {
    local DIR="$(pwd)"
    while [[ ! -f "$DIR/settings.yaml" && "$DIR" != "/" ]]; do
        DIR=$(dirname "$DIR")
    done

    if [[ -f "$DIR/settings.yaml" ]]; then
        echo "$DIR"
    else
        echo "Error: Root directory not found. Ensure settings.yaml exists in the project root."
        exit 1
    fi
}

# Function to recursively build the test tree with color-coded statuses
# Function to recursively build the test tree with color-coded statuses
build_test_tree() {
    local DIR="$1"
    local PREFIX="$2"
    local IS_LAST="$3"

    # Read metadata.yaml to get test name and test ID
    local METADATA_FILE="$DIR/metadata.yaml"
    if [[ -f "$METADATA_FILE" ]]; then
        local TEST_ID=$(yq eval '.test_id' "$METADATA_FILE")
        local TEST_NAME=$(yq eval '.test_name' "$METADATA_FILE")
    else
        return
    fi

    # Determine test status
    local LOG_FILE="$DIR/outputs/run_test.log"
    local PREPROCESSED_FILE="$DIR/outputs/output_his_preprocessed.nc"
    local STATUS_COLOR=""
    local STATUS=""

    

    if [[ ! -f "$LOG_FILE" ]]; then
    STATUS_COLOR="\e[33m"  # Yellow (Not Run)
    STATUS="[Not Run]"
else
    local LAST_LINE=$(tail -n 1 "$LOG_FILE")
    if grep -q "Error" "$LOG_FILE"; then  # Check for errors first
        STATUS_COLOR="\e[31m"  # Red (Failed)
        STATUS="[Failed]"
    elif grep -q "started time-stepping" "$LOG_FILE"; then  # Check if started
        if grep -q "MAIN: DONE" "$LOG_FILE"; then  # Check if completed
        # check if preprocessed file exists
            if [[ -f "$PREPROCESSED_FILE" ]]; then
                STATUS_COLOR="\e[92m"  # Bright Green (Passed and Preprocessed)
                STATUS="[Passed and Preprocessed]"
            else
                STATUS_COLOR="\e[32m"  # Green (Passed)
                STATUS="[Passed]"
            fi
        else  # Started but not finished
            STATUS_COLOR="\e[35m"  # Magenta (Running)
            STATUS="[Running]"
        fi
    else # Log file exists, but doesn't have "started time-stepping"
        STATUS_COLOR="\e[36m" # Cyan (Unknown/Incomplete)
        STATUS="[Incomplete/Unknown]"
    fi
fi

    # Print test entry with color
    if [[ "$IS_LAST" == "true" ]]; then
        echo -e "${PREFIX}└── ${STATUS_COLOR}(ID: $TEST_ID) $TEST_NAME $STATUS\e[0m"
    else
        echo -e "${PREFIX}├── ${STATUS_COLOR}(ID: $TEST_ID) $TEST_NAME $STATUS\e[0m"
    fi

    # Find and display subtests
    local SUBTESTS_DIR="$DIR/subtests"
    if [[ -d "$SUBTESTS_DIR" ]]; then
        local SUBTESTS=("$SUBTESTS_DIR"/*)
        local SUBTESTS_WITH_METADATA=()

        for SUBTEST in "${SUBTESTS[@]}"; do
            if [[ -d "$SUBTEST" ]]; then
                local SUBTEST_METADATA_FILE="$SUBTEST/metadata.yaml"
                if [[ -f "$SUBTEST_METADATA_FILE" ]]; then
                    local SUBTEST_NAME=$(yq eval '.description' "$SUBTEST_METADATA_FILE")
                    local SUBTEST_ID=$(yq eval '.test_id' "$SUBTEST_METADATA_FILE")
                    SUBTESTS_WITH_METADATA+=("$SUBTEST|$SUBTEST_NAME|$SUBTEST_ID")
                fi
            fi
        done

        IFS=$'\n' sorted_subtests=($(for subtest in "${SUBTESTS_WITH_METADATA[@]}"; do echo "$subtest"; done | sort -t '|' -k3))
        unset IFS

        local COUNT=${#sorted_subtests[@]}
        local INDEX=0

        for SUBTEST_METADATA in "${sorted_subtests[@]}"; do
            IFS='|' read -r SUBTEST_DIR SUBTEST_NAME SUBTEST_ID <<< "$SUBTEST_METADATA"
            INDEX=$((INDEX + 1))
            if [[ $INDEX -eq $COUNT ]]; then
                build_test_tree "$SUBTEST_DIR" "${PREFIX}    " "true"
            else
                build_test_tree "$SUBTEST_DIR" "${PREFIX}│   " "false"
            fi
        done
    fi
}



# Function to display the test tree
show_test_tree() {
    local ROOT_DIR="$1"
    local TESTS_DIR="$ROOT_DIR/Tests"

    if [[ ! -d "$TESTS_DIR" ]]; then
        echo "Error: Tests directory not found at $TESTS_DIR."
        exit 1
    fi

    echo ""
    echo "Test Tree:"
    echo "----------"

    # Iterate through all tests in the Tests directory
    local TESTS=("$TESTS_DIR"/*)
    local TESTS_WITH_METADATA=()

    # Collect all tests and their metadata
    for TEST in "${TESTS[@]}"; do
        if [[ -d "$TEST" ]]; then
            local METADATA_FILE="$TEST/metadata.yaml"
            if [[ -f "$METADATA_FILE" ]]; then
                local TEST_NAME=$(yq eval '.description' "$METADATA_FILE")
                local TEST_ID=$(yq eval '.test_id' "$METADATA_FILE")
                TESTS_WITH_METADATA+=("$TEST|$TEST_NAME|$TEST_ID")
            fi
        fi
    done

    # Sort the tests by test ID
    IFS=$'\n' sorted_tests=($(for test in "${TESTS_WITH_METADATA[@]}"; do echo "$test"; done | sort -t '|' -k3))
    unset IFS

    # Iterate over sorted tests and display them
    local COUNT=${#sorted_tests[@]}
    local INDEX=0

    for TEST_METADATA in "${sorted_tests[@]}"; do
        IFS='|' read -r TEST_DIR TEST_NAME TEST_ID <<< "$TEST_METADATA"
        INDEX=$((INDEX + 1))
        if [[ $INDEX -eq $COUNT ]]; then
            build_test_tree "$TEST_DIR" "" "true"
        else
            build_test_tree "$TEST_DIR" "" "false"
        fi
    done

echo ""
}

# Main script execution
ROOT_DIR=$(find_root_dir)  # Find the root directory
show_test_tree "$ROOT_DIR"  # Display the test tree