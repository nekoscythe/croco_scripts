#!/bin/bash

# Ensure the script is run from the test directory
TEST_DIR="$(pwd)"
METADATA_FILE="$TEST_DIR/metadata.yaml"
FULL_METADATA_FILE_PATH="$METADATA_FILE"

# Function to check if metadata.yaml exists
check_metadata_file() {
    if [[ ! -f "$METADATA_FILE" ]]; then
        echo "Error: metadata.yaml not found in $TEST_DIR."
        exit 1
    fi
}

# Function to get the root directory of the project by looking for settings.yaml
get_root_dir() {
    local dir="$(pwd)"
    while [[ ! -f "$dir/settings.yaml" && "$dir" != "/" ]]; do
        dir=$(dirname "$dir")  # Move up one directory level
    done

    if [[ -f "$dir/settings.yaml" ]]; then
        echo "$dir"
    else
        echo "Error: settings.yaml not found in any parent directory."
        exit 1
    fi
}

# Function to get the directory of the current script
get_script_dir() {
    echo "$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
}

# Function to source the CPU core setting script
source_cpu_script() {
    local script_dir=$(get_script_dir)
    source "$script_dir/set_cpu_cores"
}

# Function to retrieve the settings.yaml file path from the root directory
get_settings_file() {
    local root_dir=$1
    local settings_file="$root_dir/settings.yaml"
    if [[ ! -f "$settings_file" ]]; then
        echo "Error: settings.yaml not found at $settings_file."
        exit 1
    fi
    echo "$settings_file"
}

# Function to retrieve a value from metadata.yaml using yq
get_metadata_value() {
    local key=$1
    local metadata_file=$2
    yq eval "$key" "$metadata_file"
}

# Function to check if the script is running in a Slurm environment
check_slurm_env() {
    read -p "Are you in the slurm environment? (y/n): " slurm_env  
    echo "$slurm_env"
}

# Function to set CPU cores based on the resolution specified in metadata.yaml
set_cpu_cores_by_resolution() {
    local resolution=$(get_metadata_value '.Config.Resolution' "$METADATA_FILE")
    if [[ "$resolution" == "medres" ]]; then
        set_cpu_cores 128
    elif [[ "$resolution" == "hires" ]]; then
        set_cpu_cores 512
    fi
}

# Function to manually select the number of CPU cores if not in Slurm
manual_cpu_core_selection() {
    local total_cores=$(nproc --all)  # Get total available CPU cores
    local cpu_cores
    while :; do
        read -p "Enter the number of CPU cores to use: " cpu_cores
        if [[ "$cpu_cores" -le "$total_cores" ]]; then
            process_cores "$cpu_cores"
            break
        else
            echo "Error: The number of CPU cores must be <= $total_cores."
        fi
    done
}

# Function to handle dependencies defined in settings.yaml
handle_dependencies() {
    local settings_file=$1
    local dependencies=$(yq eval 'explode(.) | .dependencies' "$settings_file")
    local dependency_count=$(echo "$dependencies" | yq eval 'length' -)
    local dependency_hashes=""
    
    for ((i = 0; i < dependency_count; i++)); do
        local dep_location=$(echo "$dependencies" | yq eval ".[$i].location" -)
        local dep_path=$(echo "$dependencies" | yq eval ".[$i].path" -)
        local dep_source="$TEST_DIR/dependencies/$(basename "$dep_path")"
        local dep_dest="$dep_location/$dep_path"
        
        if [[ ! -f "$dep_source" ]]; then
            echo "Error: Dependency not found at $dep_source."
            exit 1
        fi
        
        # Compute hash of the dependency file
        local dep_hash=$(sha256sum "$dep_source" | cut -d ' ' -f 1)
        dependency_hashes+="$dep_path:$dep_hash "
        mkdir -p "$(dirname "$dep_dest")"
        cp "$dep_source" "$dep_dest"
    done
    
    echo "$dependency_hashes"
}

find_existing_binary() {
    local bins_dir=$1
    local dep_hashes="$2"
    local found_hash_file=""
    local warning_message=""  # Store warning messages

    for bin_hash_file in "$bins_dir"/*.hashes; do
        if [[ -f "$bin_hash_file" ]]; then
            local existing_hashes=$(cat "$bin_hash_file")
            local all_match=true

            for hash in $dep_hashes; do
                if [[ ! "$existing_hashes" =~ "$hash" ]]; then
                    all_match=false
                    break
                fi
            done

            if [[ "$all_match" == true ]]; then
                local binary_path="${bin_hash_file%.hashes}"
                if [[ -f "$binary_path" ]]; then
                    found_hash_file="$bin_hash_file"
                    break
                else
                    warning_message+="Warning: Hash file found, but corresponding binary '$binary_path' is missing. Recompiling." # Append to warning message
                fi
            fi
        fi
    done

    if [[ -n "$warning_message" ]]; then  # Print warning message *outside* the function's main output
        echo "$warning_message" >&2  # Send warning to stderr
    fi

    if [[ -n "$found_hash_file" ]]; then
        echo "$found_hash_file"  # Only return the hash file if the binary exists
    else
        echo ""
    fi
}

# Function to compile the binary if no matching binary is found
compile_binary() {
    local root_dir=$1
    local compile_script=$2
    local debug_flag=$3  # Add a debug flag argument

    cd "$root_dir" || exit 1

    if [[ -n "$debug_flag" ]]; then  # Check if debug flag is set
        "$compile_script"        # Run with output if debug is on
    else
        echo "Compiling binary..."
        "$compile_script" > /dev/null 2>&1  # Suppress output if debug is off
    fi

    if [[ $? -ne 0 ]]; then
        echo "Error: Compilation failed."
        exit 1
    fi
}

# Function to clean up temporary files after compilation
cleanup_files() {
    local root_dir=$1
    rm -rf "$root_dir/Compile" "$root_dir/MUSTANG_NAMELIST"
    rm -f "$root_dir/croco.in" "$root_dir/kRGB61.txt" "$root_dir/kRGB61.txt.1"
    rm -f "$root_dir/namelist_pisces_cfg" "$root_dir/namelist_pisces_cfg.1"
    rm -f "$root_dir/namelist_pisces_ref" "$root_dir/namelist_pisces_ref.1"
    rm -f "$root_dir/ncjoin" "$root_dir/partit"
}

#unset parallel file writint
unset_parallel_file() {
    local local_test_dir=$1
    local cppdefs_file="$local_test_dir/dependencies/cppdefs.h"

    #check if the file exists
    if [[ ! -f "$cppdefs_file" ]]; then
        echo "Error: cppdefs.h file not found at $cppdefs_file."
        exit 1
    fi

    echo "Unsetting parallel file..."

    # Find the line containing NC4PAR
    line=$(awk '/NC4PAR/ {print NR}' "$cppdefs_file")

    # Check if a line was found
    if [[ -n "$line" ]]; then
        #change define to undef
        sed -i "${line}s/define/undef/" "$cppdefs_file"

    else
        echo "Error: NC4PAR not found in cppdefs.h."
        exit 1
    fi
}

# Main script execution
# *** Corrected Argument Parsing (Crucial Fix) ***
debug_flag=""
while [[ $# -gt 0 ]]; do
    case "$1" in
        -d) debug_flag="-d"; shift ;;  # Set debug flag and remove it
        *) break ;;  # Exit loop if not a flag
    esac
done

check_metadata_file
ROOT_DIR=$(get_root_dir)
SETTINGS_FILE=$(get_settings_file "$ROOT_DIR")
source_cpu_script
SLURM_ENV=$(check_slurm_env)

if [[ "$SLURM_ENV" == "y" ]]; then
    module load gcc/9.2.0 openmpi/4.1.1rc1 netcdf-fortran/4.6.1 netcdf-c/4.9.0
    set_cpu_cores_by_resolution
else
    unset_parallel_file "$TEST_DIR"
    manual_cpu_core_selection
fi

DEPENDENCY_HASHES=$(handle_dependencies "$SETTINGS_FILE")
BINARIES_DIR="$ROOT_DIR/$(get_metadata_value '.project.binaries_dir' "$SETTINGS_FILE")"
BINARY_DESTINATION="$BINARIES_DIR/$(get_metadata_value '.test_name' "$METADATA_FILE")_$(get_metadata_value '.test_id' "$METADATA_FILE")"
EXISTING_BINARY=$(find_existing_binary "$BINARIES_DIR" "$DEPENDENCY_HASHES")


if [[ -n "$EXISTING_BINARY" ]]; then
    EXISTING_BINARY_PATH="${EXISTING_BINARY%.hashes}"
    yq eval ".binary_path = \"$EXISTING_BINARY_PATH\"" -i "$METADATA_FILE"
    echo "Using existing binary."
else
    COMPILE_SCRIPT="$ROOT_DIR/$(get_metadata_value '.scripts.compile' "$SETTINGS_FILE")"
    compile_binary "$ROOT_DIR" "$COMPILE_SCRIPT" "$debug_flag"
    mv "$ROOT_DIR/croco" "$BINARY_DESTINATION"
    echo "$DEPENDENCY_HASHES" > "$BINARY_DESTINATION.hashes"
    yq eval ".binary_path = \"$BINARY_DESTINATION\"" -i "$FULL_METADATA_FILE_PATH"
    echo "Binary compiled successfully."
    cleanup_files "$ROOT_DIR"
fi
